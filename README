Requirements:
    Create a new repository on github (free open source one)
    Write the code in php using OO principals 
    Use oauth2 to get an access token
    Use the token to look for JPG files in the user account 
    Download the files and organize them in directories structure by date (<year>/<month>/<day>/aaa.jpg) according to the photo's “date taken” (you can use a tool like “exiftool" to get the jpeg meta data – EXIF -  and extract date taken)
    Extra points for a (highly) scalable solution
    
Demo:
    https://viral.appledecay.com/dropboximageindexer/

Features:
    Index all JPEGs across dropbox account
    Highly scalable. 
    Tunable resource usage (number of workers per box)

Testing:
    I have 577 pictures on dropbox. Other factors could have influenced these results as they were performed on a shared hosting enviroment with unknown network conditions, however, I ran a few tests which yielded similar results. 
    It took 10m16s with 1 worker.
    It took 4m10s with 5 workers.


TODO:
    Back end
        Support configurable image types.
        Add downloadAndIndex tasks throughout the buildFileList instead of at the end. This will speed up when user can see pictures
        Send email to user at the end of indexing
        Error handling!
        Move folders like config, logs, tmp out of web accessible area
[X]     Modify runIndexer.php to take no parameters and be a generic worker. To be used on backend workers with a cronjob (or similar)
        Add HOST to task table. Currently, keeping unique worker ids between hosts will avoid needing this.
        Save dropbox DELTA cursor and use db delta API so subsequent imports only look at diffs. 
        Log clean up or better log management. Move logs out of webroot
        Use Composer to pull in dropbox-sdk dependency
        Decouple TaskManager concept from dropboxJpegIndexer (better OO :-)
            Move task specific database columns to separate table (or database)
            Create class for tasks, images, extend from the database class (make some generic functions in db class)
        Store dropbox path and local path in db. This has too many useful benefits to even mention :-)
        Pictures taken on the same day with the same name will overwrite the previous. Fix
    
    Front end
        Add gallery to view and traverse images.
        Add UI to show progress, start imports, etc
        Security around the images, currently they are directly accessible with dir listing on


Notes:
    Photos without DateTime will be placed in a configurable folder currently set to noTakenDate. Other fields in EXIF should be examined...

    More workers can be added on other boxes. The front end codebase can be configured with 0 workers, while the backend boxes can be configured with workers that can handle the load.

    The indexing process was written with OO principals in mind, however, authorize.php was hacked together as it was primarily used to test.

    For high scalability I added a taskQueue that reads from a tasks table. There are two types of tasks.

    1. buildFileList - this will go through user db account and build file list
    2. downloadAndIndex - this will go through list created in above task and download the files and index.

    Step 2 is broken up into parts that can be worked on by multiple workers concurrently. Workers can be on the same box or another box sharing access to this db directly or a slave. The workers will also need to have a shared network storage.

    Another performance improvement that I could do but will not for the purpose of this exercise is to use multi-curl to have concurrent downloads.

After-thoughts:
    Tasks should have been a class. The taskQueue should not be tightly coupled with the dropboxIndexer. A loose coupling would allow for parts to be changed out more easily.